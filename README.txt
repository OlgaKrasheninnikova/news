Список действий необходимый для запуска проекта:

1. Склонировать репозиторий
2. Создать базу данных Mysql. Прописать данные для доступа к БД в файл config/db.php
3. composer create-project
4. Запустить миграцию стороннего модуля авторизации dektrium/yii2-user:
  ./yii migrate/up --migrationPath=@vendor/dektrium/yii2-user/migrations
5. Запусить стандартную миграцию Yii2 для создани Rbac структуры БД:
  ./yii migrate --migrationPath=@yii/rbac/migrations/
6. Запустить собственную миграцию проекта:
  ./yii migrate
7. chmod 0777 web/assets/
8. Зарегистрировать тестовых пользователей стандартными средствами авторизации. Присвоить пользователям права администратора и менеджера можно с помощью утилит:
 ./yii rbac/make-admin {id}
 ./yii rbac/make-manager {id}
В качестве {id} следует передать имя либо email либо id пользователя.



Для авторизации использован готовый модуль dektrium/yii2-user. Он реализует сам механизм авторизации и регистрации с подтверждением email, а также, CRUD операции пользователя.
Модуль легко расширяется - позволяет переопределять свои классы. Некоторые его классы пришлось переопределить, для добавления модальных окон и некоторого другого функционала. Лишних функций содержит минимум.

Для реализации RBAC модели была использоана стандартная структура БД Yii2 (и миграция для нее). Весь код для реализации RBAC по сути сводится к настройке ролей и разрешений (это реализовано через миграцию) и их проверки.
CRUD функционал для RBAC моделей в панель управления добавлять не стала (т.к такого требования в задаче не было, я сочла это избыточным.). Для присвоения ролей пользователям предусмотрен простой консольный скрипт (пункт 8 инсталяции проекта).

Отправка оповещений пользователям реализована в реальном времяни. В реальном проекте отправка уведомлений должна быть организована через очереди событий. В задание 2 система уведомлений работает на очередях. В этом тестовом проекте я сочла реализацию очередей избыточной.